# cmake_minimum_required(VERSION 3.8)
cmake_minimum_required(VERSION 3.10)
project(compare_flexbe_utilities)

# added
cmake_policy(SET CMP0074 NEW)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(moveit_ros_planning_interface REQUIRED)
find_package(moveit_msgs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(rosidl_default_generators REQUIRED)
find_package(rclcpp REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_sensor_msgs REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(pcl_msgs REQUIRED)
find_package(pcl_ros REQUIRED)
find_package(pcl_conversions REQUIRED)
find_package(PCL REQUIRED)
# temporally commented out gpd_ros (25/08/29) for I cannot locate a ROS2 wrapper for gpd
# find_package(gpd_ros REQUIRED)
find_package(builtin_interfaces REQUIRED)

# added 25/09/08
# find_package(moveit_cpp REQUIRED)
find_package(ompl REQUIRED)
# find_package(moveit_visual_tools REQUIRED) # optional if you want visualization

# Generate service
rosidl_generate_interfaces(${PROJECT_NAME}
  "srv/CartesianMoveToPose.srv"
  "srv/MoveToNamedPose.srv"
  "srv/MoveToPose.srv"
  "srv/VoxelGridFilter.srv"
  "srv/PlaneSegmentation.srv"
  "srv/EuclideanClustering.srv"
  "srv/GetPointCloud.srv"
  "srv/FilterByIndices.srv"
  DEPENDENCIES
    sensor_msgs
    pcl_msgs
    geometry_msgs
    std_msgs
#     gpd_ros
)

include_directories(
  ${PCL_INCLUDE_DIRS}
  # added 
  ${moveit_ros_planning_interface_INCLUDE_DIRS}
  ${OMPL_INCLUDE_DIRS}
  ${rclcpp_INCLUDE_DIRS}
  ${geometry_msgs_INCLUDE_DIRS}
)

# Create executable
add_executable(cartesian_move_to_pose_service src/cartesian_move_to_pose_service.cpp)
ament_target_dependencies(cartesian_move_to_pose_service
  rclcpp
  geometry_msgs
  moveit_ros_planning_interface
  moveit_msgs
  # added 
  moveit_core
  moveit_ros_planning
  # moveit_cpp
  # moveit_common
  # trajectory_processing
  # moveit_ros_moveit_cpp
)

add_executable(move_to_named_pose_service src/move_to_named_pose_service.cpp)
ament_target_dependencies(move_to_named_pose_service
  rclcpp
  geometry_msgs
  moveit_ros_planning_interface
  moveit_msgs
  # added 
  moveit_core
  moveit_ros_planning
  # moveit_cpp
  ompl
)

add_executable(move_to_pose_service src/move_to_pose_service.cpp)
ament_target_dependencies(move_to_pose_service
  rclcpp
  geometry_msgs
  moveit_ros_planning_interface
  moveit_msgs
)

add_executable(voxel_grid_filter_service src/voxel_grid_filter_service.cpp)
ament_target_dependencies(voxel_grid_filter_service
  rclcpp
  sensor_msgs
  pcl_conversions
)
target_link_libraries(voxel_grid_filter_service ${PCL_LIBRARIES})

add_executable(plane_segmentation_service src/plane_segmentation_service.cpp)
ament_target_dependencies(plane_segmentation_service
  rclcpp
  pcl_conversions
  pcl_msgs
)
target_link_libraries(plane_segmentation_service ${PCL_LIBRARIES})

add_executable(euclidean_clustering_service src/euclidean_clustering_service.cpp)
ament_target_dependencies(euclidean_clustering_service
  rclcpp
  sensor_msgs
  geometry_msgs
  pcl_conversions
  pcl_msgs
#   gpd_ros
)
target_link_libraries(euclidean_clustering_service ${PCL_LIBRARIES})

add_executable(get_point_cloud_service src/get_point_cloud_service.cpp)
ament_target_dependencies(get_point_cloud_service
  rclcpp
  sensor_msgs
  geometry_msgs
  tf2_ros
  tf2_sensor_msgs
  tf2_geometry_msgs
  pcl_ros
  pcl_conversions
)
target_link_libraries(get_point_cloud_service ${PCL_LIBRARIES})

add_executable(filter_by_indices_service src/filter_by_indices_service.cpp)
ament_target_dependencies(filter_by_indices_service
  rclcpp
  sensor_msgs
  geometry_msgs
  tf2_ros
  tf2_sensor_msgs
  tf2_geometry_msgs
  pcl_ros
  pcl_conversions
)
target_link_libraries(filter_by_indices_service ${PCL_LIBRARIES})

install(TARGETS 
  cartesian_move_to_pose_service
  move_to_named_pose_service
  move_to_pose_service
  voxel_grid_filter_service
  plane_segmentation_service
  euclidean_clustering_service
  get_point_cloud_service
  filter_by_indices_service
  DESTINATION lib/${PROJECT_NAME})

# Link generated service headers
rosidl_get_typesupport_target(cpp_typesupport_target ${PROJECT_NAME} "rosidl_typesupport_cpp")
target_link_libraries(cartesian_move_to_pose_service ${cpp_typesupport_target})
target_link_libraries(move_to_named_pose_service 
  ${cpp_typesupport_target}
  # added
  ${OMPL_LIBRARIES}
 )
target_link_libraries(move_to_pose_service ${cpp_typesupport_target})
target_link_libraries(voxel_grid_filter_service ${cpp_typesupport_target})
target_link_libraries(plane_segmentation_service ${cpp_typesupport_target})
target_link_libraries(euclidean_clustering_service ${cpp_typesupport_target})
target_link_libraries(get_point_cloud_service ${cpp_typesupport_target})
target_link_libraries(filter_by_indices_service ${cpp_typesupport_target})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()


ament_export_dependencies(rosidl_default_runtime)
ament_package()
